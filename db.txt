--- running postgres using docker
    docker run --name postgres17 -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=secret -d postgres:17-alpine
    docker exec -it postgres17 psql -U root
        select now();
        \q -> exit/quit exec
    docker logs postgres17
    use sql code from dbdiagram.io in tableplus to form those tables in db started by docker

--- DB Migration (golang-migrate)
    brew install golang-migrate
    - create Migration
        migrate create -ext sql -dir db/migration -seq init_schema(created 2 up and down migration files)
    - docker create db in container sh
        - docker exec -it postgres17 / bin/sh
        createdb --username=root --owner=root simple_bank
        psql simple_bank(inside db)
        \q - quit
        dropdb simple_bank (deletes created db)

-- Create db wihtout going into contianer shell
    docker exec -it postgres17 createdb --username=root --owner=root simple_bank
    docker exec -it postgres17  psql -U root simple_bank (access it wihtout container shell)

---Create db using docker and migration file 
    make postgres (starts postgres container)
    make createdb (make simple_bank database)
    connect container to table plus and select the created empty database
    migrate -path db/mgration -database "postgresql://root:secret@localhost:5432/simple_bank?sslmode=disable" -verbose up
    add migrateup and migratedown commands to makefile and use those to migrate

---CRUD code using sqlc (not sql/db package as its verbose and errors caught only as runtime, not gorm as it is slow and you need to use its native funcs only, not sqlx as its error is caught at runtime as well)
    sqlc - genenrates code for given sql structure(brew install kyleconroy/sqlc/sqlc)
    sqlc init(to initialize sqlc)
    configure sqlc.yml file
    make sqlc (runs the queries and generates the results){generates sqlc files for the corresponding query and db}
    write the queries required and run generate/make sqlc 

---Testing CRUD 
    lib/pq is required as database/sql is a general interface
    command to run the test file - go test ./db/sqlc/
    testify package to check errors in returned obj/struct rather than if else
    Testing in build package is used to test as well